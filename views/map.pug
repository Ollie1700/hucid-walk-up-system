extends layout

block content
    #page-content.col-11.d-flex.flex-column.align-items-stretch
        h1.page-title
            | Directions
        .row.mb-auto.map-directions-container
            .col-12.col-md-4
                .map-card.text-center
                    p
                        strong From:
                    p
                        select#start.custom-select
                            option My location
                            option Richmond Building, Southsea
                            option James Watson Hall, Southsea
                            option Portland Building, Southsea
                    p
                        strong To:
                    p
                        select#end.custom-select
                            option(disabled='', selected='') -- Select Destination --
                            option Richmond Building, Southsea
                            option James Watson Hall, Southsea
                            option Portland Building, Southsea
                    //
                        <p>
                        <a href="#" class="btn btn-primary">
                        Show On Map
                        </a>
                        </p>
                    p
                        a.btn.btn-warning(href='/email')
                            | Send To Email
                            i.fa.fa-paper-plane
                .map-card.qr-code-container.text-center
                    strong Send map to your phone
                    img#qr-code
            .col-12.col-md-8.center-flex
                #map
                    
block scripts    
    script.
         // These lets are global so we can access our location in another function
        let myLocationLat, myLocationLng;
        // Generating the QR code
        var
        qrCode = $('#qr-code'),
        qrCodeContainer = $('.qr-code-container'),
        qrApi = '//api.qrserver.com/v1/create-qr-code/?size=200x200&data=',
        gmapsDirApi = 'https://www.google.com/maps/dir/?api=1&',
        setQRCode = function(origin, destination) {
            var gmapsUri = gmapsDirApi + 'origin=' + origin + '&destination=' + destination;
            gmapsUri = gmapsUri.replace(/ /g, '+');
            qrCode.attr('src', qrApi + encodeURIComponent(gmapsUri));
            qrCodeContainer.css('display', 'block');
            qrCodeContainer.css('opacity', '1');
        };
        function getCurrentLocation() {
            // Asynchronously grabs the current location of the walk up system and pass those values into a map initalizer function
            navigator.geolocation.getCurrentPosition((position) => {
                myLocationLat = position.coords.latitude
                myLocationLng = position.coords.longitude
                const currentLocation = {lat: myLocationLat, lng: myLocationLng}
                initMap(currentLocation)
            })
        }
        function geoCodeLatLng(geocoder, destination) {
            // Get dropdowns for start and end
            const start = document.getElementById('start')
            const end = document.getElementById('end')
            // Get latLng for start and end
            const latlngStart = {lat: parseFloat(myLocationLat), lng: parseFloat(myLocationLng)}
            const latlngEnd = destination
            // To populate the dropwdowns, we must convert lat lng to string, this is done with reverse geocoding
            geocoder.geocode({'location': latlngStart}, function(results, status) {
                if (status === 'OK') {
                    let startVal = results[0].formatted_address
                    let startOption = document.createElement('option')
                    startOption.textContent = startVal
                    startOption.setAttribute('selected', 'selected')
                    start.appendChild(startOption)
                }
            })
            geocoder.geocode({'location': destination}, function(results, status) {
                if (status === 'OK') {
                    let endVal = results[0].formatted_address
                    let endOption = document.createElement('option')
                    endOption.textContent = endVal
                    endOption.setAttribute('selected', 'selected')
                    end.appendChild(endOption)
                }
            })
        }
        // Initialise map
        function initMap(currentLocation) {
            // Stuff that allows us to create directions
            let directionsService = new google.maps.DirectionsService();
            let directionsDisplay = new google.maps.DirectionsRenderer();
            // Google Maps API Config
            const mapOptions = {
              zoom: 13,
              center: currentLocation
            }
            // Get destination coordinates from localStorage, which are created in 'upcoming-talks.html'
            const destinationCoords = JSON.parse(localStorage.getItem('coords')) || []
            const destinationCoordsObj = destinationCoords[0]
            let destination
            // If there's nothing in localStorage, just set a 0,0 lng lat which d
            if(!destinationCoordsObj) {
                destination = {
                    lat: 0,
                    lng: 0
                }
            // Otherwise, set destination coords (we use the Number constructor as when we intiially parse localStorage, the values are stored as strings)
            } else {
                destination = {
                    lat: Number(destinationCoordsObj['lat']),
                    lng: Number(destinationCoordsObj['lng'])
                }
                // Use reverse geocoding to...
                let geocoder = new google.maps.Geocoder;
                geoCodeLatLng(geocoder, destination);
            }
            // Create a new Google Map with the config options
            const map = new google.maps.Map(document.getElementById('map'), mapOptions);
            directionsDisplay.setMap(map);
            // Google Maps API origin and destination config
            const request = {
                origin: currentLocation,
                destination,
                travelMode: 'DRIVING'
            }
            // If the directions config is legal then set the directions accordingly
            directionsService.route(request, function(result, status) {
                if (status == 'OK') {
                    directionsDisplay.setDirections(result);
                    setQRCode(request.origin.lat + ',' + request.origin.lng, request.destination.lat + ',' + request.destination.lng);
                }
            });
            // Pass in existing directionsService and directionsDisplay state to another function via event listener
            // If we don't create this anonymous function and manually create a new directionsService and directionsDisplay in calculateAndDisplayRoute, then JS will throw an 'already initialised' error
            var onChangeHandler = function() {
                calculateAndDisplayRoute(directionsService, directionsDisplay);
            };
            // If any of the dropdowns are changed, call onChangeHandler function
            document.getElementById('start').addEventListener('change', onChangeHandler);
            document.getElementById('end').addEventListener('change', onChangeHandler);
        }
            // Update route once a new dropdown option is selected
        function calculateAndDisplayRoute(directionsService, directionsDisplay) {
            // Get current values of the start and end
            let start = document.getElementById('start').value
            let end = document.getElementById('end').value
            // Fade out the QR code until we get a new one
            qrCodeContainer.css('opacity', '0');
            // If the start and end values are equal to 'my location' then get lat and long from our globals defined at the top
            if(start === 'My location') {
               start = {lat: myLocationLat, lng: myLocationLng}
            }
            if(end === 'My location') {
               end = {lat: myLocationLat, lng: myLocationLng}
            }
            // Google Maps API origin and destination config
            const request = {
                origin: start,
                destination: end,
                travelMode: 'DRIVING'
            };
            // If the directions config is legal then set the directions accordingly
            directionsService.route(request, function(result, status) {
                if (status == 'OK') {
                    directionsDisplay.setDirections(result);
                    var
                    origin = (typeof request.origin === 'object') ?
                             (request.origin.lat + ',' + request.origin.lng) :
                             (request.origin),
                    destination = (typeof request.destination === 'object') ?
                                  (request.destination.lat + ',' + request.destination.lng) :
                                  (request.destination);
                    setQRCode(origin, destination);
                    qrCodeContainer.css('display', 'block');
                    qrCodeContainer.css('opacity', '1');
                }
            });
        }

    script(async defer src="//maps.googleapis.com/maps/api/js?AIzaSyB5vpnssWpC_uebey4SPt61zMQbkrb4DRQ&callback=getCurrentLocation")
